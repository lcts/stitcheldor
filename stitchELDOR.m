function [ data, params ] = stitchELDOR(varargin)
% stitch together two ELDOR time traces
%
% USAGE:
% data = stitcheldor(x_short, y_short, x_long, y_long)
% [data params] = stitcheldor(x_short, y_short, x_long, y_long)
%
% input y data should be complex to allow phase correction,
% otherwise phase-correction will be deactivated
%
% INPUTS:
% x/y_short/long: data to be stitched
% autophase:      true or false, perform phase-correction
%
% OUTPUTS:
% data:   A struct containing the original data (phase-corrected) in data.short
%         and data.long, the stitched data with stitched x axis in data.stitched
%         and the stitched data with interpolated x axis in data.interp
% params: parameters generated by the program, like phase corrections applied
%         and scaling used
%
p = inputParser;
p.addRequired('x_short', @(x)validateattributes(x,{'numeric'},{'vector'}));
p.addRequired('y_short', @(x)validateattributes(x,{'numeric'},{'vector'}));
p.addRequired('x_long',  @(x)validateattributes(x,{'numeric'},{'vector'}));
p.addRequired('y_long',  @(x)validateattributes(x,{'numeric'},{'vector'}));
p.addParamValue('autophase', true, @(x)validateattributes(x,{'logical'},{'scalar'}));
p.FunctionName = 'stitchELDOR';
p.parse(varargin{:});

% save x axes in output
data.short.x = p.Results.x_short;
data.long.x  = p.Results.x_long;

% find splitpoint as minimum of xlong - max(xshort)
[~,  params.split.index] = min(abs(data.long.x - max(data.short.x)));
% shift by one if the found index is on the wrong side due to min(abs(...))
if data.long.x(params.split.index) <= data.short.x(end)
  params.split.index = params.split.index + 1;
end
params.split.value = data.long.x(params.split.index)

% generate stitched and interpolated x axes
data.stitched.x = [ data.short.x; data.long.x(params.split.index:end) ];
data.interp.x   = (data.short.x(1):data.short.x(2)-data.short.x(1):data.long.x(end))';

% phase-correct y data if needed and data complex
if ~isreal(p.Results.y_short) && p.Results.autophase
  [ data.short.y params.short.phase params.short.phaseoffset params.short.phasedeviation] = autophase(p.Results.y_short);
else
  data.short.y = p.Results.y_short;
  params.short.phase = false;
end
if ~isreal(p.Results.y_long) && p.Results.autophase
  [ data.long.y params.long.phase params.long.phaseoffset params.long.phasedeviation]  = autophase(p.Results.y_long);
else
  data.long.y  = p.Results.y_long;
  params.long.phase  = false;
end

% interpolate long.y at points short.x
data.interp.y = interp1(data.long.x, data.long.y, data.short.x);

% fit interp.y to short.y
f = @(x)sum((real(data.short.y) - (x(1)*real(data.interp.y) + x(2))).^2);
ab = fminsearch(f,[1 0]);

% save parameters
params.scaling = ab(1);
params.offset = ab(2);

% scale data.long.y and stitch it
data.stitched.y = params.scaling * data.long.y + params.offset;
data.stitched.y = [ data.short.y; data.stitched.y(params.split.index:end) ];
% as well as interpolate it at points interp.x
data.interp.y = interp1(data.stitched.x, data.stitched.y, data.interp.x);
